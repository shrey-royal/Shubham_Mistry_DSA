Arrays:

1. Check if pair with given Sum exists in Array:

> Given an array A[] of n numbers and another number x, the task is to check whether or not there exist two elements in A[] whose sum is exactly x. 

Input: arr[] = {0, -1, 2, -3, 1}, x= -2
Output: Yes
Explanation:  If we calculate the sum of the output,1 + (-3) = -2

Input: arr[] = {1, -2, 1, 0, 5}, x = 0
Output: No

2. Find common elements in three sorted arrays

Input: 
ar1[] = {1, 5, 10, 20, 40, 80} 
ar2[] = {6, 7, 20, 80, 100} 
ar3[] = {3, 4, 15, 20, 30, 70, 80, 120} 
Output: 20, 80

Input: 
ar1[] = {1, 5, 5} 
ar2[] = {3, 4, 5, 5, 10} 
ar3[] = {5, 5, 10, 20} 
Output: 5, 5
    
3. Find the element that appears once in an array where every other element appears twice

> Given an array of integers. All numbers occur twice except one number which occurs once. Find the number in O(n) time & constant extra space.

Input:  arr[] = {2, 3, 5, 4, 5, 3, 4}
Output: 2 

4. Find the only repetitive element between 1 to N-1

> Given an array of size N filled with numbers from 1 to N-1 in random order. The array has only one repetitive element. The task is to find the repetitive element.

Input: a[] = {1, 3, 2, 3, 4}
Output: 3
Explanation: The number 3 is the only repeating element.

Input: a[] = {1, 5, 1, 2, 3, 4}
Output: 1

5. Majority Element

> Find the majority element in the array. A majority element in an array A[] of size n is an element that appears more than n/2 times (and hence there is at most one such element).

Input : A[]={3, 3, 4, 2, 4, 4, 2, 4, 4}
Output : 4
Explanation: The frequency of 4 is 5 which is greater than the half of the size of the array size. 

Input : A[] = {3, 3, 4, 2, 4, 4, 2, 4}
Output : No Majority Element
Explanation: There is no element whose frequency is greater than the half of the size of the array size.

6. Find all triplets with zero sum

> Given an array of distinct elements. The task is to find triplets in the array whose sum is zero.

Input: arr[] = {0, -1, 2, -3, 1}
Output: (0 -1 1), (2 -3 1)
Explanation: The triplets with zero sum are 0 + -1 + 1 = 0 and 2 + -3 + 1 = 0  

Input: arr[] = {1, -2, 1, 0, 5}
Output: 1 -2  1
Explanation: The triplets with zero sum is 1 + -2 + 1 = 0   

7. Find a pair with the given difference

> Given an unsorted array and a number n, find if there exists a pair of elements in the array whose difference is n. 

Input: arr[] = {5, 20, 3, 2, 50, 80}, n = 78
Output: Pair Found: (2, 80)

Input: arr[] = {90, 70, 20, 80, 50}, n = 45
Output: No Such Pair

8. Find closest number in Sorted array

> Given an array of sorted integers. We need to find the closest value to the given number. Array may contain duplicate values and negative numbers. 

Input : arr[] = {1, 2, 4, 5, 6, 6, 8, 9}
             Target number = 11
Output : 9
9 is closest to 11 in given array

Input :arr[] = {2, 5, 6, 7, 8, 8, 9}; 
       Target number = 4
Output : 5
5 is closest to 4 in given array

Input :arr[] = {2, 5, 6, 7, 8, 8, 9, 15, 19, 22, 32}; 
       Target number = 34
Output : 32
32 is closest to 34 in given array


----------------------------------------------------------------------------------------------------4

Tasks on Binary Search Tree:

1. Phonebook Search: Consider a phonebook with millions of entries, and you want to search for a specific person's phone number. A binary search tree can be used to store the phonebook in sorted order and quickly search for a phone number by name.

1. Phonebook Search:
    - Phonebook data: 
        - Name: Phone Number
        - Alice: 1234567890
        - Bob: 2345678901
        - Charlie: 3456789012
        - David: 4567890123
        - Emily: 5678901234
    - Search queries:
        - Alice
        - Charlie
        - Emily

2. Stock Price Lookup: Imagine you have a list of historical stock prices for a company, and you want to quickly find the highest and lowest prices during a specific time period. A binary search tree can be used to store the prices in sorted order, allowing you to find the highest and lowest prices with logarithmic time complexity.

2. Stock Price Lookup:
    - Stock price data: 
        - Date: Price
        - Jan 1, 2020: $100
        - Feb 1, 2020: $120
        - Mar 1, 2020: $130
        - Apr 1, 2020: $110
        - May 1, 2020: $140
    - Search queries:
        - Highest price between Feb 1, 2020 and May 1, 2020
        - Lowest price between Jan 1, 2020 and Mar 1, 2020
        - Highest price overall

3. Flight Booking System: Suppose you are designing a flight booking system that needs to quickly find available seats on a plane. A binary search tree can be used to store the seat map of the plane, allowing the system to quickly search for available seats by row and seat number.

3. Flight Booking System:
    - Flight data: 
        - Rows 1-3: ABCDEFGH
        - Rows 4-6: ABCDEFGH
        - Rows 7-10: ABCDEFGHJK
        - Rows 11-15: ABCDEFGHJK
    - Search queries:
        - Available seats for a flight with 10 rows and 4 seats per row
        - Available seats for a flight with 15 rows and 3 seats per row
        - Available seats for a flight with 7 rows and 2 seats per row

4. Genealogy Tree: Consider a genealogy tree that shows the relationships between different members of a family over several generations. A binary search tree can be used to organize the tree in a way that allows quick search for ancestors and descendants of a particular person.

4. Genealogy Tree:
    - Genealogy data: 
        - Person: Parents
        - Alice: John and Jane
        - Bob: John and Alice
        - Charlie: Bob and Carol
        - David: Bob and Alice
        - Emily: Charlie and David
    - Search queries:
        - Ancestors of Emily
        - Descendants of Bob
        - Parents of Charlie

5. Music Streaming App: Imagine you have a music streaming app that needs to quickly find songs that match a user's search query. A binary search tree can be used to store the song database in sorted order by title, artist, or other criteria, allowing for quick and efficient searches.

5. Music Streaming App:
    - Song data: 
        - Title: Artist
        - A Song: Artist A
        - B Song: Artist B
        - C Song: Artist A
        - D Song: Artist C
        - E Song: Artist B
    - Search queries:
        - Songs by Artist A
        - Songs with the word "Song" in the title
        - Songs by Artist B, sorted by title