1. Matching Parentheses: One classic use case for a stack is to check whether parentheses in a given string are balanced or not. This problem is solved using a stack where each opening bracket is pushed into the stack and each closing bracket is popped out of the stack. If the stack is empty at the end of the string, then the parentheses are balanced. If there are any remaining brackets in the stack, then the parentheses are not balanced.

Input: "((2 + 3) * 5)"
Output: Balanced

Input: "((2 + 3) * 5))"
Output: Not balanced

Input: "{[()()]}"
Output: Balanced

Input: "{[(])}"
Output: Not balanced

Input: "{[()[]]{}()}"
Output: Balanced

Input: "}"
Output: Not balanced

2. Browser History: Another example of using a stack is managing the history of a web browser. Each time a user visits a new page, the URL of the page is added to the top of the stack. When the user clicks the "back" button, the top URL is popped off the stack and displayed. Similarly, if the user clicks the "forward" button, the URLs can be pushed back onto the stack.

Input: Visit "google.com", "facebook.com", "twitter.com", "linkedin.com" in that order, then click "back" button twice and "forward" button once.

Output:

Visiting "google.com"
Visiting "facebook.com"
Visiting "twitter.com"
Visiting "linkedin.com"
Going back to "twitter.com"
Going back to "facebook.com"
Going forward to "twitter.com"
Input: Visit "yahoo.com", "youtube.com", "stackoverflow.com", "github.com" in that order, then click "back" button three times and "forward" button once.

Output:

Visiting "yahoo.com"
Visiting "youtube.com"
Visiting "stackoverflow.com"
Visiting "github.com"
Going back to "stackoverflow.com"
Going back to "youtube.com"
Going back to "yahoo.com"
Going forward to "youtube.com"

3. Undo/Redo Operations: A stack can also be used to implement undo and redo operations in a text editor or a graphics application. Each time a user performs an action, such as typing a letter or drawing a shape, the action is pushed onto the stack. When the user clicks the "undo" button, the most recent action is popped off the stack and reversed. Similarly, when the user clicks the "redo" button, the previously undone action can be pushed back onto the stack and re-executed.

Input: Type "hello" in a text editor, then click "undo" button, then click "redo" button.

Output:

Type "h"
Type "he"
Type "hel"
Type "hell"
Type "hello"
Undoing "hello"
Redoing "hello"
Input: Draw a rectangle in a graphics application, then draw a circle, then click "undo" button twice, then click "redo" button once.

Output:

Drawing rectangle
Drawing circle
Undoing circle
Undoing rectangle
Redoing rectangle

4. Largest Rectangle in a Histogram: Given an array of heights representing a histogram, write a program to find the largest rectangle that can be formed within the histogram. You can use a stack to keep track of the indices of the histogram bars in non-decreasing order of heights. The idea is to iterate over the histogram bars, pushing the indices onto the stack until you find a bar with a height less than the height at the top of the stack. When this happens, you pop the top index and calculate the area of the rectangle formed by the height of the popped bar and the width of the sub-histogram between the current index and the previous index on the top of the stack. You keep track of the maximum area seen so far and return it as the result.

Input: [2, 1, 5, 6, 2, 3]
Output: 10
Explanation: The largest rectangle can be formed using the bars with heights 5 and 6. The width of the rectangle is 2 (the distance between the indices of 5 and 6) and the height is 5 (the height of the smaller bar). Therefore, the area of the rectangle is 10.

Input: [4, 2, 0, 3, 2, 5]
Output: 6
Explanation: The largest rectangle can be formed using the bars with heights 3, 2, and 5. The width of the rectangle is 3 (the distance between the indices of 3 and 5) and the height is 2 (the height of the smallest bar). Therefore, the area of the rectangle is 6.

Input: [6, 2, 5, 4, 5, 1, 6]
Output: 12
Explanation: The largest rectangle can be formed using the bars with heights 5, 4, and 5. The width of the rectangle is 3 (the distance between the indices of the leftmost and rightmost 5's) and the height is 4 (the height of the smallest bar). Therefore, the area of the rectangle is 12.